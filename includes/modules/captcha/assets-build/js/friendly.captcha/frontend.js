/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./friendly.captcha/frontend/main.js":
/*!*******************************************!*\
  !*** ./friendly.captcha/frontend/main.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _observableHandle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./observableHandle */ \"./friendly.captcha/frontend/observableHandle.js\");\n\nvar addAction = JetPlugins.hooks.addAction;\naddAction('jet.fb.observe.after', 'jet-form-builder/friendly.captcha', _observableHandle__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9mcmllbmRseS5jYXB0Y2hhL2Zyb250ZW5kL21haW4uanMuanMiLCJtYXBwaW5ncyI6Ijs7QUFBa0Q7QUFFbEQsSUFBUUMsU0FBUyxHQUFLQyxVQUFVLENBQUNDLEtBQUssQ0FBOUJGLFNBQVM7QUFFakJBLFNBQVMsQ0FDUixzQkFBc0IsRUFDdEIsbUNBQW1DLEVBQ25DRCx5REFDRCxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vamZiLWNhcHRjaGEvLi9mcmllbmRseS5jYXB0Y2hhL2Zyb250ZW5kL21haW4uanM/ODAxZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgb2JzZXJ2YWJsZUhhbmRsZSBmcm9tICcuL29ic2VydmFibGVIYW5kbGUnO1xyXG5cclxuY29uc3QgeyBhZGRBY3Rpb24gfSA9IEpldFBsdWdpbnMuaG9va3M7XHJcblxyXG5hZGRBY3Rpb24oXHJcblx0J2pldC5mYi5vYnNlcnZlLmFmdGVyJyxcclxuXHQnamV0LWZvcm0tYnVpbGRlci9mcmllbmRseS5jYXB0Y2hhJyxcclxuXHRvYnNlcnZhYmxlSGFuZGxlLFxyXG4pOyJdLCJuYW1lcyI6WyJvYnNlcnZhYmxlSGFuZGxlIiwiYWRkQWN0aW9uIiwiSmV0UGx1Z2lucyIsImhvb2tzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./friendly.captcha/frontend/main.js\n");

/***/ }),

/***/ "./friendly.captcha/frontend/observableHandle.js":
/*!*******************************************************!*\
  !*** ./friendly.captcha/frontend/observableHandle.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var friendly_challenge__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! friendly-challenge */ \"../../node_modules/friendly-challenge/index.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nvar applyFilters = JetPlugins.hooks.applyFilters;\n\n\n/**\r\n * @param observable {Observable}\r\n */\nfunction observableHandle(observable) {\n  var _window$JetFormBuilde, _window, _window$JetFormBuilde2, _observable$getSubmit, _observable$getSubmit2, _observable$getSubmit3;\n  if (observable.parent) {\n    return;\n  }\n\n  /**\r\n   * @type {null|InputData}\r\n   */\n  var token = observable.getInput('_captcha_token');\n  var formID = observable.getSubmit().getFormId();\n  var container = token.nodes[0].nextElementSibling;\n  var options = (_window$JetFormBuilde = (_window = window) === null || _window === void 0 ? void 0 : (_window$JetFormBuilde2 = _window.JetFormBuilderCaptchaConfig) === null || _window$JetFormBuilde2 === void 0 ? void 0 : _window$JetFormBuilde2[formID]) !== null && _window$JetFormBuilde !== void 0 ? _window$JetFormBuilde : false;\n  if (!container || !options) {\n    return;\n  }\n\n  // for correct applying validation logics\n  token.isVisible = function () {\n    return true;\n  };\n  options = _objectSpread(_objectSpread({}, options), {}, {\n    doneCallback: function doneCallback(responseHash) {\n      token.value.current = responseHash;\n      token.loading.end();\n    },\n    startedCallback: function startedCallback() {\n      return token.loading.start();\n    },\n    errorCallback: function errorCallback() {\n      return token.loading.end();\n    }\n  });\n  options = applyFilters('jet.fb.friendlyCaptcha.options', options, observable);\n  var widget = new friendly_challenge__WEBPACK_IMPORTED_MODULE_0__.WidgetInstance(container, options);\n  (_observable$getSubmit = observable.getSubmit().submitter) === null || _observable$getSubmit === void 0 ? void 0 : (_observable$getSubmit2 = _observable$getSubmit.status) === null || _observable$getSubmit2 === void 0 ? void 0 : (_observable$getSubmit3 = _observable$getSubmit2.watch) === null || _observable$getSubmit3 === void 0 ? void 0 : _observable$getSubmit3.call(_observable$getSubmit2, function () {\n    widget.reset();\n  });\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (observableHandle);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9mcmllbmRseS5jYXB0Y2hhL2Zyb250ZW5kL29ic2VydmFibGVIYW5kbGUuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxJQUFRQSxZQUFZLEdBQUtDLFVBQVUsQ0FBQ0MsS0FBSyxDQUFqQ0YsWUFBWTtBQUNnQzs7QUFFcEQ7QUFDQTtBQUNBO0FBQ0EsU0FBU0ksZ0JBQWdCQSxDQUFFQyxVQUFVLEVBQUc7RUFBQSxJQUFBQyxxQkFBQSxFQUFBQyxPQUFBLEVBQUFDLHNCQUFBLEVBQUFDLHFCQUFBLEVBQUFDLHNCQUFBLEVBQUFDLHNCQUFBO0VBQ3ZDLElBQUtOLFVBQVUsQ0FBQ08sTUFBTSxFQUFHO0lBQ3hCO0VBQ0Q7O0VBRUE7QUFDRDtBQUNBO0VBQ0MsSUFBTUMsS0FBSyxHQUFPUixVQUFVLENBQUNTLFFBQVEsQ0FBRSxnQkFBaUIsQ0FBQztFQUN6RCxJQUFNQyxNQUFNLEdBQU1WLFVBQVUsQ0FBQ1csU0FBUyxDQUFDLENBQUMsQ0FBQ0MsU0FBUyxDQUFDLENBQUM7RUFDcEQsSUFBTUMsU0FBUyxHQUFHTCxLQUFLLENBQUNNLEtBQUssQ0FBRSxDQUFDLENBQUUsQ0FBQ0Msa0JBQWtCO0VBRXJELElBQUlDLE9BQU8sSUFBQWYscUJBQUEsSUFBQUMsT0FBQSxHQUNWZSxNQUFNLGNBQUFmLE9BQUEsd0JBQUFDLHNCQUFBLEdBQU5ELE9BQUEsQ0FBUWdCLDJCQUEyQixjQUFBZixzQkFBQSx1QkFBbkNBLHNCQUFBLENBQXVDTyxNQUFNLENBQUUsY0FBQVQscUJBQUEsY0FBQUEscUJBQUEsR0FBSSxLQUNuRDtFQUVELElBQUssQ0FBQ1ksU0FBUyxJQUFJLENBQUNHLE9BQU8sRUFBRztJQUM3QjtFQUNEOztFQUVBO0VBQ0FSLEtBQUssQ0FBQ1csU0FBUyxHQUFHO0lBQUEsT0FBTSxJQUFJO0VBQUE7RUFFNUJILE9BQU8sR0FBQUksYUFBQSxDQUFBQSxhQUFBLEtBQ0hKLE9BQU87SUFDVkssWUFBWSxXQUFBQSxhQUFFQyxZQUFZLEVBQUc7TUFDNUJkLEtBQUssQ0FBQ2UsS0FBSyxDQUFDQyxPQUFPLEdBQUdGLFlBQVk7TUFDbENkLEtBQUssQ0FBQ2lCLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLENBQUM7SUFDcEIsQ0FBQztJQUNEQyxlQUFlLEVBQUUsU0FBQUEsZ0JBQUE7TUFBQSxPQUFNbkIsS0FBSyxDQUFDaUIsT0FBTyxDQUFDRyxLQUFLLENBQUMsQ0FBQztJQUFBO0lBQzVDQyxhQUFhLEVBQUUsU0FBQUEsY0FBQTtNQUFBLE9BQU1yQixLQUFLLENBQUNpQixPQUFPLENBQUNDLEdBQUcsQ0FBQyxDQUFDO0lBQUE7RUFBQSxFQUN4QztFQUVEVixPQUFPLEdBQUdyQixZQUFZLENBQ3JCLGdDQUFnQyxFQUNoQ3FCLE9BQU8sRUFDUGhCLFVBQ0QsQ0FBQztFQUVELElBQU04QixNQUFNLEdBQUcsSUFBSWhDLDhEQUFjLENBQUVlLFNBQVMsRUFBRUcsT0FBUSxDQUFDO0VBRXZELENBQUFaLHFCQUFBLEdBQUFKLFVBQVUsQ0FBQ1csU0FBUyxDQUFDLENBQUMsQ0FBQ29CLFNBQVMsY0FBQTNCLHFCQUFBLHdCQUFBQyxzQkFBQSxHQUFoQ0QscUJBQUEsQ0FBa0M0QixNQUFNLGNBQUEzQixzQkFBQSx3QkFBQUMsc0JBQUEsR0FBeENELHNCQUFBLENBQTBDNEIsS0FBSyxjQUFBM0Isc0JBQUEsdUJBQS9DQSxzQkFBQSxDQUFBNEIsSUFBQSxDQUFBN0Isc0JBQUEsRUFBbUQsWUFBTTtJQUN4RHlCLE1BQU0sQ0FBQ0ssS0FBSyxDQUFDLENBQUM7RUFDZixDQUFFLENBQUM7QUFDSjtBQUVBLGlFQUFlcEMsZ0JBQWdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vamZiLWNhcHRjaGEvLi9mcmllbmRseS5jYXB0Y2hhL2Zyb250ZW5kL29ic2VydmFibGVIYW5kbGUuanM/OGMxNiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IGFwcGx5RmlsdGVycyB9ID0gSmV0UGx1Z2lucy5ob29rcztcclxuaW1wb3J0IHsgV2lkZ2V0SW5zdGFuY2UgfSBmcm9tICdmcmllbmRseS1jaGFsbGVuZ2UnO1xyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSBvYnNlcnZhYmxlIHtPYnNlcnZhYmxlfVxyXG4gKi9cclxuZnVuY3Rpb24gb2JzZXJ2YWJsZUhhbmRsZSggb2JzZXJ2YWJsZSApIHtcclxuXHRpZiAoIG9ic2VydmFibGUucGFyZW50ICkge1xyXG5cdFx0cmV0dXJuO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogQHR5cGUge251bGx8SW5wdXREYXRhfVxyXG5cdCAqL1xyXG5cdGNvbnN0IHRva2VuICAgICA9IG9ic2VydmFibGUuZ2V0SW5wdXQoICdfY2FwdGNoYV90b2tlbicgKTtcclxuXHRjb25zdCBmb3JtSUQgICAgPSBvYnNlcnZhYmxlLmdldFN1Ym1pdCgpLmdldEZvcm1JZCgpO1xyXG5cdGNvbnN0IGNvbnRhaW5lciA9IHRva2VuLm5vZGVzWyAwIF0ubmV4dEVsZW1lbnRTaWJsaW5nO1xyXG5cclxuXHRsZXQgb3B0aW9ucyA9IChcclxuXHRcdHdpbmRvdz8uSmV0Rm9ybUJ1aWxkZXJDYXB0Y2hhQ29uZmlnPy5bIGZvcm1JRCBdID8/IGZhbHNlXHJcblx0KTtcclxuXHJcblx0aWYgKCAhY29udGFpbmVyIHx8ICFvcHRpb25zICkge1xyXG5cdFx0cmV0dXJuO1xyXG5cdH1cclxuXHJcblx0Ly8gZm9yIGNvcnJlY3QgYXBwbHlpbmcgdmFsaWRhdGlvbiBsb2dpY3NcclxuXHR0b2tlbi5pc1Zpc2libGUgPSAoKSA9PiB0cnVlO1xyXG5cclxuXHRvcHRpb25zID0ge1xyXG5cdFx0Li4ub3B0aW9ucyxcclxuXHRcdGRvbmVDYWxsYmFjayggcmVzcG9uc2VIYXNoICkge1xyXG5cdFx0XHR0b2tlbi52YWx1ZS5jdXJyZW50ID0gcmVzcG9uc2VIYXNoO1xyXG5cdFx0XHR0b2tlbi5sb2FkaW5nLmVuZCgpO1xyXG5cdFx0fSxcclxuXHRcdHN0YXJ0ZWRDYWxsYmFjazogKCkgPT4gdG9rZW4ubG9hZGluZy5zdGFydCgpLFxyXG5cdFx0ZXJyb3JDYWxsYmFjazogKCkgPT4gdG9rZW4ubG9hZGluZy5lbmQoKSxcclxuXHR9O1xyXG5cclxuXHRvcHRpb25zID0gYXBwbHlGaWx0ZXJzKFxyXG5cdFx0J2pldC5mYi5mcmllbmRseUNhcHRjaGEub3B0aW9ucycsXHJcblx0XHRvcHRpb25zLFxyXG5cdFx0b2JzZXJ2YWJsZSxcclxuXHQpO1xyXG5cclxuXHRjb25zdCB3aWRnZXQgPSBuZXcgV2lkZ2V0SW5zdGFuY2UoIGNvbnRhaW5lciwgb3B0aW9ucyApO1xyXG5cclxuXHRvYnNlcnZhYmxlLmdldFN1Ym1pdCgpLnN1Ym1pdHRlcj8uc3RhdHVzPy53YXRjaD8uKCAoKSA9PiB7XHJcblx0XHR3aWRnZXQucmVzZXQoKTtcclxuXHR9ICk7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IG9ic2VydmFibGVIYW5kbGU7Il0sIm5hbWVzIjpbImFwcGx5RmlsdGVycyIsIkpldFBsdWdpbnMiLCJob29rcyIsIldpZGdldEluc3RhbmNlIiwib2JzZXJ2YWJsZUhhbmRsZSIsIm9ic2VydmFibGUiLCJfd2luZG93JEpldEZvcm1CdWlsZGUiLCJfd2luZG93IiwiX3dpbmRvdyRKZXRGb3JtQnVpbGRlMiIsIl9vYnNlcnZhYmxlJGdldFN1Ym1pdCIsIl9vYnNlcnZhYmxlJGdldFN1Ym1pdDIiLCJfb2JzZXJ2YWJsZSRnZXRTdWJtaXQzIiwicGFyZW50IiwidG9rZW4iLCJnZXRJbnB1dCIsImZvcm1JRCIsImdldFN1Ym1pdCIsImdldEZvcm1JZCIsImNvbnRhaW5lciIsIm5vZGVzIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwib3B0aW9ucyIsIndpbmRvdyIsIkpldEZvcm1CdWlsZGVyQ2FwdGNoYUNvbmZpZyIsImlzVmlzaWJsZSIsIl9vYmplY3RTcHJlYWQiLCJkb25lQ2FsbGJhY2siLCJyZXNwb25zZUhhc2giLCJ2YWx1ZSIsImN1cnJlbnQiLCJsb2FkaW5nIiwiZW5kIiwic3RhcnRlZENhbGxiYWNrIiwic3RhcnQiLCJlcnJvckNhbGxiYWNrIiwid2lkZ2V0Iiwic3VibWl0dGVyIiwic3RhdHVzIiwid2F0Y2giLCJjYWxsIiwicmVzZXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./friendly.captcha/frontend/observableHandle.js\n");

/***/ }),

/***/ "../../node_modules/friendly-challenge/index.js":
/*!******************************************************!*\
  !*** ../../node_modules/friendly-challenge/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"WidgetInstance\": () => (/* binding */ WidgetInstance),\n/* harmony export */   \"localizations\": () => (/* binding */ localizations)\n/* harmony export */ });\n// Adapted from the base64-arraybuffer package implementation\n// (https://github.com/niklasvh/base64-arraybuffer, MIT licensed)\nconst CHARS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nconst EQ_CHAR = \"=\".charCodeAt(0);\n// Use a lookup table to find the index.\nconst lookup = new Uint8Array(256);\nfor (let i = 0; i < CHARS.length; i++) {\n    lookup[CHARS.charCodeAt(i)] = i;\n}\nfunction encode(bytes) {\n    const len = bytes.length;\n    let base64 = \"\";\n    for (let i = 0; i < len; i += 3) {\n        const b0 = bytes[i + 0];\n        const b1 = bytes[i + 1];\n        const b2 = bytes[i + 2];\n        // This temporary variable stops the NextJS 13 compiler from breaking this code in optimization.\n        // See issue https://github.com/FriendlyCaptcha/friendly-challenge/issues/165\n        let t = \"\";\n        t += CHARS.charAt(b0 >>> 2);\n        t += CHARS.charAt(((b0 & 3) << 4) | (b1 >>> 4));\n        t += CHARS.charAt(((b1 & 15) << 2) | (b2 >>> 6));\n        t += CHARS.charAt(b2 & 63);\n        base64 += t;\n    }\n    if (len % 3 === 2) {\n        base64 = base64.substring(0, base64.length - 1) + \"=\";\n    }\n    else if (len % 3 === 1) {\n        base64 = base64.substring(0, base64.length - 2) + \"==\";\n    }\n    return base64;\n}\nfunction decode(base64) {\n    const len = base64.length;\n    let bufferLength = (len * 3) >>> 2; // * 0.75\n    if (base64.charCodeAt(len - 1) === EQ_CHAR)\n        bufferLength--;\n    if (base64.charCodeAt(len - 2) === EQ_CHAR)\n        bufferLength--;\n    const bytes = new Uint8Array(bufferLength);\n    for (let i = 0, p = 0; i < len; i += 4) {\n        const encoded1 = lookup[base64.charCodeAt(i + 0)];\n        const encoded2 = lookup[base64.charCodeAt(i + 1)];\n        const encoded3 = lookup[base64.charCodeAt(i + 2)];\n        const encoded4 = lookup[base64.charCodeAt(i + 3)];\n        bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n        bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n        bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n    }\n    return bytes;\n}\n\nvar css = '.frc-captcha *{margin:0;padding:0;border:0;text-align:initial;border-radius:px;filter:none!important;transition:none!important;font-weight:400;font-size:14px;line-height:1.2;text-decoration:none;background-color:initial;color:#222}.frc-captcha{position:relative;min-width:250px;max-width:312px;border:1px solid #f4f4f4;padding-bottom:12px;background-color:#fff}.frc-captcha b{font-weight:700}.frc-container{display:flex;align-items:center;min-height:52px}.frc-icon{fill:#222;stroke:#222;flex-shrink:0;margin:8px 8px 0}.frc-icon.frc-warning{fill:#c00}.frc-success .frc-icon{animation:1s ease-in both frc-fade-in}.frc-content{white-space:nowrap;display:flex;flex-direction:column;margin:4px 6px 0 0;overflow-x:auto;flex-grow:1}.frc-banner{position:absolute;bottom:0;right:6px;line-height:1}.frc-banner *{font-size:10px;opacity:.8;text-decoration:none}.frc-progress{-webkit-appearance:none;-moz-appearance:none;appearance:none;margin:3px 0;height:4px;border:none;background-color:#eee;color:#222;width:100%;transition:.5s linear}.frc-progress::-webkit-progress-bar{background:#eee}.frc-progress::-webkit-progress-value{background:#222}.frc-progress::-moz-progress-bar{background:#222}.frc-button{cursor:pointer;padding:2px 6px;background-color:#f1f1f1;border:1px solid transparent;text-align:center;font-weight:600;text-transform:none}.frc-button:focus{border:1px solid #333}.frc-button:hover{background-color:#ddd}.frc-captcha-solution{display:none}.frc-err-url{text-decoration:underline;font-size:.9em}.dark.frc-captcha{color:#fff;background-color:#222;border-color:#333}.dark.frc-captcha *{color:#fff}.dark.frc-captcha button{background-color:#444}.dark .frc-icon{fill:#fff;stroke:#fff}.dark .frc-progress{background-color:#444}.dark .frc-progress::-webkit-progress-bar{background:#444}.dark .frc-progress::-webkit-progress-value{background:#ddd}.dark .frc-progress::-moz-progress-bar{background:#ddd}@keyframes frc-fade-in{from{opacity:0}to{opacity:1}}';\n\n// This is not an enum to save some bytes in the output bundle.\nconst SOLVER_TYPE_JS = 1;\nconst CHALLENGE_SIZE_BYTES = 128;\n\n// @ts-ignore\r\nconst loaderSVG = `<circle cx=\"12\" cy=\"12\" r=\"8\" stroke-width=\"3\" stroke-dasharray=\"15 10\" fill=\"none\" stroke-linecap=\"round\" transform=\"rotate(0 12 12)\"><animateTransform attributeName=\"transform\" type=\"rotate\" repeatCount=\"indefinite\" dur=\"0.9s\" values=\"0 12 12;360 12 12\"/></circle>`;\r\nconst errorSVG = `<path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z\"/>`;\r\n/**\r\n * Base template used for all widget states\r\n * The reason we use raw string interpolation here is so we don't have to ship something like lit-html.\r\n */\r\nfunction getTemplate(fieldName, svgContent, svgAriaHidden, textContent, solutionString, buttonText, progress = false, debugData, additionalContainerClasses) {\r\n    return `<div class=\"frc-container${additionalContainerClasses ? \" \" + additionalContainerClasses : \"\"}\">\n<svg class=\"frc-icon\"${svgAriaHidden ? \" aria-hidden=\\\"true\\\"\" : \"\"} role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" height=\"32\" width=\"32\" viewBox=\"0 0 24 24\">${svgContent}</svg>\n<div class=\"frc-content\">\n    <span class=\"frc-text\" ${debugData ? `title=\"${debugData}\"` : ``}>${textContent}</span>\n    ${buttonText ? `<button type=\"button\" class=\"frc-button\">${buttonText}</button>` : \"\"}\n    ${progress ? `<progress class=\"frc-progress\" value=\"0\">0%</progress>` : \"\"}\n</div>\n</div><span class=\"frc-banner\"><a lang=\"en\" href=\"https://friendlycaptcha.com/\" rel=\"noopener\" target=\"_blank\"><b>Friendly</b>Captcha ⇗</a></span>\n<input name=\"${fieldName}\" class=\"frc-captcha-solution\" type=\"hidden\" value=\"${solutionString}\">`;\r\n}\r\n/**\r\n * Used when the widget is ready to start solving.\r\n */\r\nfunction getReadyHTML(fieldName, l) {\r\n    return getTemplate(fieldName, `<path d=\"M17,11c0.34,0,0.67,0.04,1,0.09V6.27L10.5,3L3,6.27v4.91c0,4.54,3.2,8.79,7.5,9.82c0.55-0.13,1.08-0.32,1.6-0.55 C11.41,19.47,11,18.28,11,17C11,13.69,13.69,11,17,11z\"/><path d=\"M17,13c-2.21,0-4,1.79-4,4c0,2.21,1.79,4,4,4s4-1.79,4-4C21,14.79,19.21,13,17,13z M17,14.38\"/>`, true, l.text_ready, \".UNSTARTED\", l.button_start, false);\r\n}\r\n/**\r\n * Used when the widget is retrieving a puzzle\r\n */\r\nfunction getFetchingHTML(fieldName, l) {\r\n    return getTemplate(fieldName, loaderSVG, true, l.text_fetching, \".FETCHING\", undefined, true);\r\n}\r\n/**\r\n * Used when the solver is running, displays a progress bar.\r\n */\r\nfunction getRunningHTML(fieldName, l) {\r\n    return getTemplate(fieldName, loaderSVG, true, l.text_solving, \".UNFINISHED\", undefined, true);\r\n}\r\nfunction getDoneHTML(fieldName, l, solution, data) {\r\n    const timeData = `${data.t.toFixed(0)}s (${((data.h / data.t) * 0.001).toFixed(0)}K/s)${data.solver === SOLVER_TYPE_JS ? \" JS Fallback\" : \"\"}`;\r\n    return getTemplate(fieldName, `<title>${l.text_completed_sr}</title><path d=\"M12 1L3 5v6c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V5l-9-4zm-2 16l-4-4 1.41-1.41L10 14.17l6.59-6.59L18 9l-8 8z\"></path>`, false, l.text_completed, solution, undefined, false, timeData, \"frc-success\");\r\n}\r\nfunction getExpiredHTML(fieldName, l) {\r\n    return getTemplate(fieldName, errorSVG, true, l.text_expired, \".EXPIRED\", l.button_restart);\r\n}\r\nfunction getErrorHTML(fieldName, l, errorDescription, recoverable = true, headless = false) {\r\n    return getTemplate(fieldName, errorSVG, true, `<b>${l.text_error}</b><br>${errorDescription}`, headless ? \".HEADLESS_ERROR\" : \".ERROR\", recoverable ? l.button_retry : undefined);\r\n}\r\n/**\r\n * Injects the style if no #frc-style element is already present\r\n * (to support custom stylesheets)\r\n */\r\nfunction injectStyle() {\r\n    if (!document.querySelector(\"#frc-style\")) {\r\n        const styleSheet = document.createElement(\"style\");\r\n        styleSheet.id = \"frc-style\";\r\n        styleSheet.innerHTML = css;\r\n        document.head.appendChild(styleSheet);\r\n    }\r\n}\r\n/**\r\n * @param element parent element of friendlycaptcha\r\n * @param progress value between 0 and 1\r\n */\r\nfunction updateProgressBar(element, data) {\r\n    const p = element.querySelector(\".frc-progress\");\r\n    const perc = (data.i + 1) / data.n;\r\n    if (p) {\r\n        p.value = perc;\r\n        p.innerText = perc.toFixed(2) + \"%\";\r\n        p.title = data.i + 1 + \"/\" + data.n + \" (\" + ((data.h / data.t) * 0.001).toFixed(0) + \"K/s)\";\r\n    }\r\n}\r\n/**\r\n * Traverses parent nodes until a <form> is found, returns null if not found.\r\n */\r\nfunction findParentFormElement(element) {\r\n    while (element.tagName !== \"FORM\") {\r\n        element = element.parentElement;\r\n        if (!element) {\r\n            return null;\r\n        }\r\n    }\r\n    return element;\r\n}\r\n/**\r\n * Add listener to specified element that will only fire once on focus.\r\n */\r\nfunction executeOnceOnFocusInEvent(element, listener) {\r\n    element.addEventListener(\"focusin\", listener, { once: true, passive: true });\r\n}\n\n// Defensive init to make it easier to integrate with Gatsby, NextJS, and friends.\r\nlet nav;\r\nlet ua;\r\nif (typeof navigator !== \"undefined\") {\r\n    nav = navigator;\r\n    ua = nav.userAgent.toLowerCase();\r\n}\r\n/**\r\n * Headless browser detection on the clientside is imperfect. One can modify any clientside code to disable or change this check,\r\n * and one can spoof whatever is checked here. However, that doesn't make it worthless: it's yet another hurdle for spammers and\r\n * it stops unsophisticated scripters from making any request whatsoever.\r\n */\r\nfunction isHeadless() {\r\n    return (\r\n    //tell-tale bot signs\r\n    ua.indexOf(\"headless\") !== -1 ||\r\n        nav.appVersion.indexOf(\"Headless\") !== -1 ||\r\n        ua.indexOf(\"bot\") !== -1 || // http://www.useragentstring.com/pages/useragentstring.php?typ=Browser\r\n        ua.indexOf(\"crawl\") !== -1 || // Only IE5 has two distributions that has this on windows NT.. so yeah.\r\n        nav.webdriver === true ||\r\n        !nav.language ||\r\n        (nav.languages !== undefined && !nav.languages.length) // IE 11 does not support NavigatorLanguage.languages https://developer.mozilla.org/en-US/docs/Web/API/NavigatorLanguage/languages\r\n    );\r\n}\n\n/**\n * Maps a value between 0 and 255 to a difficulty threshold (as uint32)\n * Difficulty 0 maps to 99.99% probability of being right on the first attempt\n * Anything above 250 needs 2^32 tries on average to solve.\n * 150 to 180 seems reasonable\n */\nfunction difficultyToThreshold(value) {\n    if (value > 255) {\n        value = 255;\n    }\n    else if (value < 0) {\n        value = 0;\n    }\n    return Math.pow(2, (255.999 - value) / 8.0) >>> 0;\n}\n\nconst PUZZLE_EXPIRY_OFFSET = 13;\nconst NUMBER_OF_PUZZLES_OFFSET = 14;\nconst PUZZLE_DIFFICULTY_OFFSET = 15;\nfunction getPuzzleSolverInputs(puzzleBuffer, numPuzzles) {\n    const startingPoints = [];\n    for (let i = 0; i < numPuzzles; i++) {\n        const input = new Uint8Array(CHALLENGE_SIZE_BYTES);\n        input.set(puzzleBuffer);\n        input[120] = i;\n        startingPoints.push(input);\n    }\n    return startingPoints;\n}\n\nfunction decodeBase64Puzzle(base64Puzzle) {\r\n    const parts = base64Puzzle.split(\".\");\r\n    const puzzle = parts[1];\r\n    const arr = decode(puzzle);\r\n    return {\r\n        signature: parts[0],\r\n        base64: puzzle,\r\n        buffer: arr,\r\n        n: arr[NUMBER_OF_PUZZLES_OFFSET],\r\n        threshold: difficultyToThreshold(arr[PUZZLE_DIFFICULTY_OFFSET]),\r\n        expiry: arr[PUZZLE_EXPIRY_OFFSET] * 300000,\r\n    };\r\n}\r\nasync function getPuzzle(urlsSeparatedByComma, siteKey, lang) {\r\n    const urls = urlsSeparatedByComma.split(\",\");\r\n    for (let i = 0; i < urls.length; i++) {\r\n        try {\r\n            const response = await fetchAndRetryWithBackoff(urls[i] + \"?sitekey=\" + siteKey, { headers: [[\"x-frc-client\", \"js-0.9.11\"]], mode: \"cors\" }, 2);\r\n            if (response.ok) {\r\n                const json = await response.json();\r\n                return json.data.puzzle;\r\n            }\r\n            else {\r\n                let json;\r\n                try {\r\n                    json = await response.json();\r\n                }\r\n                catch (e) {\r\n                    /* Do nothing, the error is not valid JSON */\r\n                }\r\n                if (json && json.errors && json.errors[0] === \"endpoint_not_enabled\") {\r\n                    throw Error(`Endpoint not allowed (${response.status})`);\r\n                }\r\n                if (i === urls.length - 1) {\r\n                    throw Error(`Response status ${response.status} ${response.statusText} ${json ? json.errors : \"\"}`);\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.error(\"[FRC Fetch]:\", e);\r\n            const err = new Error(`${lang.text_fetch_error} <a class=\"frc-err-url\" href=\"${urls[i]}\">${urls[i]}</a>`);\r\n            err.rawError = e;\r\n            throw err;\r\n        }\r\n    }\r\n    // This code should never be reached.\r\n    throw Error(`Internal error`);\r\n}\r\n/**\r\n * Retries given request with exponential backoff (starting with 1000ms delay, multiplying by 4 every time)\r\n * @param url Request (can be string url) to fetch\r\n * @param opts Options for fetch\r\n * @param n Number of times to attempt before giving up.\r\n */\r\nasync function fetchAndRetryWithBackoff(url, opts, n) {\r\n    let time = 1000;\r\n    return fetch(url, opts).catch(async (error) => {\r\n        if (n === 0)\r\n            throw error;\r\n        await new Promise((r) => setTimeout(r, time));\r\n        time *= 4;\r\n        return fetchAndRetryWithBackoff(url, opts, n - 1);\r\n    });\r\n}\n\n// English\r\nconst LANG_EN = {\r\n    text_init: \"Initializing...\",\r\n    text_ready: \"Anti-Robot Verification\",\r\n    button_start: \"Click to start verification\",\r\n    text_fetching: \"Fetching Challenge\",\r\n    text_solving: \"Verifying you are human...\",\r\n    text_completed: \"I am human\",\r\n    text_completed_sr: \"Automatic spam check completed\",\r\n    text_expired: \"Anti-Robot verification expired\",\r\n    button_restart: \"Restart\",\r\n    text_error: \"Verification failed\",\r\n    button_retry: \"Retry\",\r\n    text_fetch_error: \"Failed to connect to\",\r\n};\r\n// French\r\nconst LANG_FR = {\r\n    text_init: \"Chargement...\",\r\n    text_ready: \"Vérification Anti-Robot\",\r\n    button_start: \"Cliquez ici pour vérifier\",\r\n    text_fetching: \"Chargement du défi\",\r\n    text_solving: \"Vérification que vous êtes un humain...\",\r\n    text_completed: \"Je suis un humain\",\r\n    text_completed_sr: \"Vérification automatique des spams terminée\",\r\n    text_expired: \"Vérification anti-robot expirée\",\r\n    button_restart: \"Redémarrer\",\r\n    text_error: \"Échec de la vérification\",\r\n    button_retry: \"Recommencer\",\r\n    text_fetch_error: \"Problème de connexion avec\",\r\n};\r\n// German\r\nconst LANG_DE = {\r\n    text_init: \"Initialisierung...\",\r\n    text_ready: \"Anti-Roboter-Verifizierung\",\r\n    button_start: \"Hier klicken\",\r\n    text_fetching: \"Herausforderung laden...\",\r\n    text_solving: \"Verifizierung, dass Sie ein Mensch sind...\",\r\n    text_completed: \"Ich bin ein Mensch\",\r\n    text_completed_sr: \"Automatische Spamprüfung abgeschlossen\",\r\n    text_expired: \"Verifizierung abgelaufen\",\r\n    button_restart: \"Erneut starten\",\r\n    text_error: \"Verifizierung fehlgeschlagen\",\r\n    button_retry: \"Erneut versuchen\",\r\n    text_fetch_error: \"Verbindungsproblem mit\",\r\n};\r\n// Dutch\r\nconst LANG_NL = {\r\n    text_init: \"Initializeren...\",\r\n    text_ready: \"Anti-robotverificatie\",\r\n    button_start: \"Klik om te starten\",\r\n    text_fetching: \"Aan het laden...\",\r\n    text_solving: \"Anti-robotverificatie bezig...\",\r\n    text_completed: \"Ik ben een mens\",\r\n    text_completed_sr: \"Automatische anti-spamcheck voltooid\",\r\n    text_expired: \"Verificatie verlopen\",\r\n    button_restart: \"Opnieuw starten\",\r\n    text_error: \"Verificatie mislukt\",\r\n    button_retry: \"Opnieuw proberen\",\r\n    text_fetch_error: \"Verbinding mislukt met\",\r\n};\r\n// Italian\r\nconst LANG_IT = {\r\n    text_init: \"Inizializzazione...\",\r\n    text_ready: \"Verifica Anti-Robot\",\r\n    button_start: \"Clicca per iniziare\",\r\n    text_fetching: \"Caricamento...\",\r\n    text_solving: \"Verificando che sei umano...\",\r\n    text_completed: \"Non sono un robot\",\r\n    text_completed_sr: \"Controllo automatico dello spam completato\",\r\n    text_expired: \"Verifica Anti-Robot scaduta\",\r\n    button_restart: \"Ricomincia\",\r\n    text_error: \"Verifica fallita\",\r\n    button_retry: \"Riprova\",\r\n    text_fetch_error: \"Problema di connessione con\",\r\n};\r\n// Portuguese\r\nconst LANG_PT = {\r\n    text_init: \"Inicializando...\",\r\n    text_ready: \"Verificação Anti-Robô\",\r\n    button_start: \"Clique para iniciar verificação\",\r\n    text_fetching: \"Carregando...\",\r\n    text_solving: \"Verificando se você é humano...\",\r\n    text_completed: \"Eu sou humano\",\r\n    text_completed_sr: \"Verificação automática de spam concluída\",\r\n    text_expired: \"Verificação Anti-Robô expirada\",\r\n    button_restart: \"Reiniciar\",\r\n    text_error: \"Verificação falhou\",\r\n    button_retry: \"Tentar novamente\",\r\n    text_fetch_error: \"Falha de conexão com\",\r\n};\r\n// Spanish\r\nconst LANG_ES = {\r\n    text_init: \"Inicializando...\",\r\n    text_ready: \"Verificación Anti-Robot\",\r\n    button_start: \"Haga clic para iniciar la verificación\",\r\n    text_fetching: \"Cargando desafío\",\r\n    text_solving: \"Verificando que eres humano...\",\r\n    text_completed: \"Soy humano\",\r\n    text_completed_sr: \"Verificación automática de spam completada\",\r\n    text_expired: \"Verificación Anti-Robot expirada\",\r\n    button_restart: \"Reiniciar\",\r\n    text_error: \"Ha fallado la verificación\",\r\n    button_retry: \"Intentar de nuevo\",\r\n    text_fetch_error: \"Error al conectarse a\",\r\n};\r\n// Catalan\r\nconst LANG_CA = {\r\n    text_init: \"Inicialitzant...\",\r\n    text_ready: \"Verificació Anti-Robot\",\r\n    button_start: \"Fes clic per començar la verificació\",\r\n    text_fetching: \"Carregant repte\",\r\n    text_solving: \"Verificant que ets humà...\",\r\n    text_completed: \"Soc humà\",\r\n    text_completed_sr: \"Verificació automàtica de correu brossa completada\",\r\n    text_expired: \"La verificació Anti-Robot ha expirat\",\r\n    button_restart: \"Reiniciar\",\r\n    text_error: \"Ha fallat la verificació\",\r\n    button_retry: \"Tornar a provar\",\r\n    text_fetch_error: \"Error connectant a\",\r\n};\r\n// Japanese\r\nconst LANG_JA = {\r\n    text_init: \"開始しています...\",\r\n    text_ready: \"アンチロボット認証\",\r\n    button_start: \"クリックして認証を開始\",\r\n    text_fetching: \"ロードしています\",\r\n    text_solving: \"認証中...\",\r\n    text_completed: \"私はロボットではありません\",\r\n    text_completed_sr: \"自動スパムチェックが完了しました\",\r\n    text_expired: \"認証の期限が切れています\",\r\n    button_restart: \"再度認証を行う\",\r\n    text_error: \"認証にエラーが発生しました\",\r\n    button_retry: \"再度認証を行う\",\r\n    text_fetch_error: \"接続ができませんでした\",\r\n};\r\n// Danish\r\nconst LANG_DA = {\r\n    text_init: \"Aktiverer...\",\r\n    text_ready: \"Jeg er ikke en robot\",\r\n    button_start: \"Klik for at starte verifikationen\",\r\n    text_fetching: \"Henter data\",\r\n    text_solving: \"Kontrollerer at du er et menneske...\",\r\n    text_completed: \"Jeg er et menneske.\",\r\n    text_completed_sr: \"Automatisk spamkontrol gennemført\",\r\n    text_expired: \"Verifikationen kunne ikke fuldføres\",\r\n    button_restart: \"Genstart\",\r\n    text_error: \"Bekræftelse mislykkedes\",\r\n    button_retry: \"Prøv igen\",\r\n    text_fetch_error: \"Forbindelsen mislykkedes\",\r\n};\r\n// Russian\r\nconst LANG_RU = {\r\n    text_init: \"Инициализация...\",\r\n    text_ready: \"АнтиРобот проверка\",\r\n    button_start: \"Нажмите, чтобы начать проверку\",\r\n    text_fetching: \"Получаю задачу\",\r\n    text_solving: \"Проверяю, что вы человек...\",\r\n    text_completed: \"Я человек\",\r\n    text_completed_sr: \"Aвтоматическая проверка на спам завершена\",\r\n    text_expired: \"Срок АнтиРоботной проверки истёк\",\r\n    button_restart: \"Начать заново\",\r\n    text_error: \"Ошибка проверки\",\r\n    button_retry: \"Повторить ещё раз\",\r\n    text_fetch_error: \"Ошибка подключения\",\r\n};\r\n// Swedish\r\nconst LANG_SV = {\r\n    text_init: \"Aktiverar...\",\r\n    text_ready: \"Jag är inte en robot\",\r\n    button_start: \"Klicka för att verifiera\",\r\n    text_fetching: \"Hämtar data\",\r\n    text_solving: \"Kontrollerar att du är människa...\",\r\n    text_completed: \"Jag är en människa\",\r\n    text_completed_sr: \"Automatisk spamkontroll slutförd\",\r\n    text_expired: \"Anti-robot-verifieringen har löpt ut\",\r\n    button_restart: \"Börja om\",\r\n    text_error: \"Verifiering kunde inte slutföras\",\r\n    button_retry: \"Omstart\",\r\n    text_fetch_error: \"Verifiering misslyckades\",\r\n};\r\n// Turkish\r\nconst LANG_TR = {\r\n    text_init: \"Başlatılıyor...\",\r\n    text_ready: \"Anti-Robot Doğrulaması\",\r\n    button_start: \"Doğrulamayı başlatmak için tıklayın\",\r\n    text_fetching: \"Yükleniyor\",\r\n    text_solving: \"Robot olmadığınız doğrulanıyor...\",\r\n    text_completed: \"Ben bir insanım\",\r\n    text_completed_sr: \"Otomatik spam kontrolü tamamlandı\",\r\n    text_expired: \"Anti-Robot doğrulamasının süresi doldu\",\r\n    button_restart: \"Yeniden başlat\",\r\n    text_error: \"Doğrulama başarısız oldu\",\r\n    button_retry: \"Tekrar dene\",\r\n    text_fetch_error: \"Bağlantı başarısız oldu\",\r\n};\r\n// Greek\r\nconst LANG_EL = {\r\n    text_init: \"Προετοιμασία...\",\r\n    text_ready: \"Anti-Robot Επαλήθευση\",\r\n    button_start: \" Κάντε κλικ για να ξεκινήσει η επαλήθευσης\",\r\n    text_fetching: \" Λήψη πρόκλησης\",\r\n    text_solving: \" Επιβεβαίωση ανθρώπου...\",\r\n    text_completed: \"Είμαι άνθρωπος\",\r\n    text_completed_sr: \" Ο αυτόματος έλεγχος ανεπιθύμητου περιεχομένου ολοκληρώθηκε\",\r\n    text_expired: \" Η επαλήθευση Anti-Robot έληξε\",\r\n    button_restart: \" Επανεκκίνηση\",\r\n    text_error: \" Η επαλήθευση απέτυχε\",\r\n    button_retry: \" Δοκιμάσετε ξανά\",\r\n    text_fetch_error: \" Αποτυχία σύνδεσης με\",\r\n};\r\n// Ukrainian\r\nconst LANG_UK = {\r\n    text_init: \"Ініціалізація...\",\r\n    text_ready: \"Антиробот верифікація\",\r\n    button_start: \"Натисніть, щоб розпочати верифікацію\",\r\n    text_fetching: \"З’єднання\",\r\n    text_solving: \"Перевірка, що ви не робот...\",\r\n    text_completed: \"Я не робот\",\r\n    text_completed_sr: \"Автоматична перевірка спаму завершена\",\r\n    text_expired: \"Час вичерпано\",\r\n    button_restart: \"Почати знову\",\r\n    text_error: \"Верифікація не вдалась\",\r\n    button_retry: \"Спробувати знову\",\r\n    text_fetch_error: \"Не вдалось з’єднатись\",\r\n};\r\n// Bulgarian\r\nconst LANG_BG = {\r\n    text_init: \"Инициализиране...\",\r\n    text_ready: \"Анти-робот проверка\",\r\n    button_start: \"Щракнете, за да започнете проверката\",\r\n    text_fetching: \"Предизвикателство\",\r\n    text_solving: \"Проверяваме дали си човек...\",\r\n    text_completed: \"Аз съм човек\",\r\n    text_completed_sr: \"Автоматичната проверка за спам е завършена\",\r\n    text_expired: \"Анти-Робот проверката изтече\",\r\n    button_restart: \"Рестартирайте\",\r\n    text_error: \"Неуспешна проверка\",\r\n    button_retry: \"Опитайте пак\",\r\n    text_fetch_error: \"Неуспешно свързване с\",\r\n};\r\n// Czech\r\nconst LANG_CS = {\r\n    text_init: \"Inicializace...\",\r\n    text_ready: \"Ověření proti robotům\",\r\n    button_start: \"Klikněte pro ověření\",\r\n    text_fetching: \"Problém při načítání\",\r\n    text_solving: \"Ověření, že jste člověk...\",\r\n    text_completed: \"Jsem člověk\",\r\n    text_completed_sr: \"Automatická kontrola spamu dokončena\",\r\n    text_expired: \"Ověření proti robotům vypršelo\",\r\n    button_restart: \"Restartovat\",\r\n    text_error: \"Ověření se nezdařilo\",\r\n    button_retry: \"Zkusit znovu\",\r\n    text_fetch_error: \"Připojení se nezdařilo\",\r\n};\r\n// Slovak\r\nconst LANG_SK = {\r\n    text_init: \"Inicializácia...\",\r\n    text_ready: \"Overenie proti robotom\",\r\n    button_start: \"Kliknite pre overenie\",\r\n    text_fetching: \"Problém pri načítaní\",\r\n    text_solving: \"Overenie, že ste človek...\",\r\n    text_completed: \"Som človek\",\r\n    text_completed_sr: \"Automatická kontrola spamu dokončená\",\r\n    text_expired: \"Overenie proti robotom vypršalo\",\r\n    button_restart: \"Reštartovať\",\r\n    text_error: \"Overenie sa nepodarilo\",\r\n    button_retry: \"Skúsiť znova\",\r\n    text_fetch_error: \"Pripojenie sa nepodarilo\",\r\n};\r\n// Norwegian\r\nconst LANG_NO = {\r\n    text_init: \" Aktiverer...\",\r\n    text_ready: \"Jeg er ikke en robot\",\r\n    button_start: \"Klikk for å starte verifiseringen\",\r\n    text_fetching: \"Henter data\",\r\n    text_solving: \"Sjekker at du er et menneske...\",\r\n    text_completed: \"Jeg er et menneske\",\r\n    text_completed_sr: \"Automatisk spam-sjekk fullført\",\r\n    text_expired: \"Verifisering kunne ikke fullføres\",\r\n    button_restart: \"Omstart\",\r\n    text_error: \"Bekreftelsen mislyktes\",\r\n    button_retry: \"Prøv på nytt\",\r\n    text_fetch_error: \"Tilkoblingen mislyktes\",\r\n};\r\n// Finnish\r\nconst LANG_FI = {\r\n    text_init: \"Aktivoidaan...\",\r\n    text_ready: \"En ole robotti\",\r\n    button_start: \"Aloita vahvistus klikkaamalla\",\r\n    text_fetching: \"Haetaan tietoja\",\r\n    text_solving: \"Tarkistaa, että olet ihminen...\",\r\n    text_completed: \"Olen ihminen\",\r\n    text_completed_sr: \"Automaattinen roskapostin tarkistus suoritettu\",\r\n    text_expired: \"Vahvistusta ei voitu suorittaa loppuun\",\r\n    button_restart: \"Uudelleenkäynnistys\",\r\n    text_error: \"Vahvistus epäonnistui\",\r\n    button_retry: \"Yritä uudelleen\",\r\n    text_fetch_error: \"Yhteys epäonnistui\",\r\n};\r\n// Latvian\r\nconst LANG_LV = {\r\n    text_init: \"Notiek inicializēšana...\",\r\n    text_ready: \"Verifikācija, ka neesat robots\",\r\n    button_start: \"Noklikšķiniet, lai sāktu verifikāciju\",\r\n    text_fetching: \"Notiek drošības uzdevuma izgūšana\",\r\n    text_solving: \"Notiek pārbaude, vai esat cilvēks...\",\r\n    text_completed: \"Es esmu cilvēks\",\r\n    text_completed_sr: \"Automātiska surogātpasta pārbaude pabeigta\",\r\n    text_expired: \"Verifikācijas, ka neesat robots, derīgums beidzies\",\r\n    button_restart: \"Restartēt\",\r\n    text_error: \"Verifikācija neizdevās\",\r\n    button_retry: \"Mēģināt vēlreiz\",\r\n    text_fetch_error: \"Neizdevās izveidot savienojumu ar\",\r\n};\r\n// Lithuanian\r\nconst LANG_LT = {\r\n    text_init: \"Inicijuojama...\",\r\n    text_ready: \"Patikrinimas, ar nesate robotas\",\r\n    button_start: \"Spustelėkite patikrinimui pradėti\",\r\n    text_fetching: \"Gavimo iššūkis\",\r\n    text_solving: \"Tikrinama, ar esate žmogus...\",\r\n    text_completed: \"Esu žmogus\",\r\n    text_completed_sr: \"Automatinė patikra dėl pašto šiukšlių atlikta\",\r\n    text_expired: \"Patikrinimas, ar nesate robotas, baigė galioti\",\r\n    button_restart: \"Pradėti iš naujo\",\r\n    text_error: \"Patikrinimas nepavyko\",\r\n    button_retry: \"Kartoti\",\r\n    text_fetch_error: \"Nepavyko prisijungti prie\",\r\n};\r\n// Polish\r\nconst LANG_PL = {\r\n    text_init: \"Inicjowanie...\",\r\n    text_ready: \"Weryfikacja antybotowa\",\r\n    button_start: \"Kliknij, aby rozpocząć weryfikację\",\r\n    text_fetching: \"Pobieranie\",\r\n    text_solving: \"Weryfikacja, czy nie jesteś robotem...\",\r\n    text_completed: \"Nie jestem robotem\",\r\n    text_completed_sr: \"Zakończono automatyczne sprawdzanie spamu\",\r\n    text_expired: \"Weryfikacja antybotowa wygasła\",\r\n    button_restart: \"Uruchom ponownie\",\r\n    text_error: \"Weryfikacja nie powiodła się\",\r\n    button_retry: \"Spróbuj ponownie\",\r\n    text_fetch_error: \"Nie udało się połączyć z\",\r\n};\r\n// Estonian\r\nconst LANG_ET = {\r\n    text_init: \"Initsialiseerimine...\",\r\n    text_ready: \"Robotivastane kinnitus\",\r\n    button_start: \"Kinnitamisega alustamiseks klõpsake\",\r\n    text_fetching: \"Väljakutse toomine\",\r\n    text_solving: \"Kinnitatakse, et sa oled inimene...\",\r\n    text_completed: \"Ma olen inimene\",\r\n    text_completed_sr: \"Automaatne rämpsposti kontroll on lõpetatud\",\r\n    text_expired: \"Robotivastane kinnitus aegus\",\r\n    button_restart: \"Taaskäivita\",\r\n    text_error: \"Kinnitamine nurjus\",\r\n    button_retry: \"Proovi uuesti\",\r\n    text_fetch_error: \"Ühenduse loomine nurjus\",\r\n};\r\n// Croatian\r\nconst LANG_HR = {\r\n    text_init: \"Početno postavljanje...\",\r\n    text_ready: \"Provjera protiv robota\",\r\n    button_start: \"Kliknite za početak provjere\",\r\n    text_fetching: \"Dohvaćanje izazova\",\r\n    text_solving: \"Provjeravamo jeste li čovjek...\",\r\n    text_completed: \"Nisam robot\",\r\n    text_completed_sr: \"Automatska provjera je završena\",\r\n    text_expired: \"Vrijeme za provjeru protiv robota je isteklo\",\r\n    button_restart: \"Osvježi\",\r\n    text_error: \"Provjera nije uspjlela\",\r\n    button_retry: \" Ponovo pokreni\",\r\n    text_fetch_error: \"Nije moguće uspostaviti vezu\",\r\n};\r\n// Serbian\r\nconst LANG_SR = {\r\n    text_init: \"Pokretanje...\",\r\n    text_ready: \"Anti-Robot Verifikacija\",\r\n    button_start: \"Kliknite da biste započeli verifikaciju\",\r\n    text_fetching: \"Učitavanje izazova\",\r\n    text_solving: \"Verifikacija da ste čovek...\",\r\n    text_completed: \"Ja sam čovek\",\r\n    text_completed_sr: \"Automatska provera neželjene pošte je završena\",\r\n    text_expired: \"Anti-Robot verifikacija je istekla\",\r\n    button_restart: \"Ponovo pokrenuti\",\r\n    text_error: \"Verifikacija nije uspela\",\r\n    button_retry: \"Pokušajte ponovo\",\r\n    text_fetch_error: \"Neuspelo povezivanje sa...\",\r\n};\r\n// Slovenian\r\nconst LANG_SL = {\r\n    text_init: \"Inicializiranje...\",\r\n    text_ready: \"Preverjanje robotov\",\r\n    button_start: \"Kliknite za začetek preverjanja\",\r\n    text_fetching: \"Prenašanje izziva\",\r\n    text_solving: \"Preverjamo, ali ste človek\",\r\n    text_completed: \"Nisem robot\",\r\n    text_completed_sr: \"Avtomatsko preverjanje je zaključeno\",\r\n    text_expired: \"Preverjanje robotov je poteklo\",\r\n    button_restart: \"Osveži\",\r\n    text_error: \"Preverjanje ni uspelo\",\r\n    button_retry: \"Poskusi ponovno\",\r\n    text_fetch_error: \"Povezave ni bilo mogoče vzpostaviti\",\r\n};\r\n// Hungarian\r\nconst LANG_HU = {\r\n    text_init: \"Inicializálás...\",\r\n    text_ready: \"Robotellenes ellenőrzés\",\r\n    button_start: \"Kattintson az ellenőrzés megkezdéséhez\",\r\n    text_fetching: \"Feladvány lekérése\",\r\n    text_solving: \"Annak igazolása, hogy Ön nem robot...\",\r\n    text_completed: \"Nem vagyok robot\",\r\n    text_completed_sr: \"Automatikus spam ellenőrzés befejeződött\",\r\n    text_expired: \"Robotellenes ellenőrzés lejárt\",\r\n    button_restart: \"Újraindítás\",\r\n    text_error: \"Az ellenőrzés nem sikerült\",\r\n    button_retry: \"Próbálja újra\",\r\n    text_fetch_error: \"Nem sikerült csatlakozni\",\r\n};\r\n// Romanian\r\nconst LANG_RO = {\r\n    text_init: \"Se inițializează...\",\r\n    text_ready: \"Verificare anti-robot\",\r\n    button_start: \"Click pentru a începe verificarea\",\r\n    text_fetching: \"Downloading\",\r\n    text_solving: \"Verificare că ești om...\",\r\n    text_completed: \"Sunt om\",\r\n    text_completed_sr: \"Verificarea automată a spam-ului a fost finalizată\",\r\n    text_expired: \"Verificarea anti-robot a expirat\",\r\n    button_restart: \"Restart\",\r\n    text_error: \"Verificare eșuată\",\r\n    button_retry: \"Reîncearcă\",\r\n    text_fetch_error: \"Nu s-a putut conecta\",\r\n};\r\n// Chinese\r\nconst LANG_ZH = {\r\n    text_init: \"初始化中……\",\r\n    text_ready: \"人机验证\",\r\n    button_start: \"点击开始\",\r\n    text_fetching: \"正在加载\",\r\n    text_solving: \"人机校验中……\",\r\n    text_completed: \"我不是机器人\",\r\n    text_completed_sr: \"人机验证完成\",\r\n    text_expired: \"验证已过期\",\r\n    button_restart: \"重新开始\",\r\n    text_error: \"校验失败\",\r\n    button_retry: \"重试\",\r\n    text_fetch_error: \"无法连接到\",\r\n};\r\n// Traditional Chinese\r\nconst LANG_ZH_TW = {\r\n    text_init: \"正在初始化……\",\r\n    text_ready: \"反機器人驗證\",\r\n    button_start: \"點擊開始驗證\",\r\n    text_fetching: \"載入中\",\r\n    text_solving: \"反機器人驗證中……\",\r\n    text_completed: \"我不是機器人\",\r\n    text_completed_sr: \"驗證完成\",\r\n    text_expired: \"驗證超時\",\r\n    button_restart: \"重新開始\",\r\n    text_error: \"驗證失敗\",\r\n    button_retry: \"重試\",\r\n    text_fetch_error: \"無法連線到\",\r\n};\r\n// Vietnamese\r\nconst LANG_VI = {\r\n    text_init: \"Đang khởi tạo...\",\r\n    text_ready: \"Xác minh chống Robot\",\r\n    button_start: \"Bấm vào đây để xác minh\",\r\n    text_fetching: \"Tìm nạp và xử lý thử thách\",\r\n    text_solving: \"Xác minh bạn là người...\",\r\n    text_completed: \"Bạn là người\",\r\n    text_completed_sr: \"Xác minh hoàn tất\",\r\n    text_expired: \"Xác minh đã hết hạn\",\r\n    button_restart: \"Khởi động lại\",\r\n    text_error: \"Xác minh thất bại\",\r\n    button_retry: \"Thử lại\",\r\n    text_fetch_error: \"Không kết nối được\",\r\n};\r\nconst localizations = {\r\n    en: LANG_EN,\r\n    de: LANG_DE,\r\n    nl: LANG_NL,\r\n    fr: LANG_FR,\r\n    it: LANG_IT,\r\n    pt: LANG_PT,\r\n    es: LANG_ES,\r\n    ca: LANG_CA,\r\n    ja: LANG_JA,\r\n    da: LANG_DA,\r\n    ru: LANG_RU,\r\n    sv: LANG_SV,\r\n    tr: LANG_TR,\r\n    el: LANG_EL,\r\n    uk: LANG_UK,\r\n    bg: LANG_BG,\r\n    cs: LANG_CS,\r\n    sk: LANG_SK,\r\n    no: LANG_NO,\r\n    fi: LANG_FI,\r\n    lv: LANG_LV,\r\n    lt: LANG_LT,\r\n    pl: LANG_PL,\r\n    et: LANG_ET,\r\n    hr: LANG_HR,\r\n    sr: LANG_SR,\r\n    sl: LANG_SL,\r\n    hu: LANG_HU,\r\n    ro: LANG_RO,\r\n    zh: LANG_ZH,\r\n    zh_tw: LANG_ZH_TW,\r\n    vi: LANG_VI,\r\n    // alternative language codes\r\n    nb: LANG_NO,\r\n};\n\nfunction createDiagnosticsBuffer(solverID, timeToSolved) {\n    const arr = new Uint8Array(3);\n    const view = new DataView(arr.buffer);\n    view.setUint8(0, solverID);\n    view.setUint16(1, timeToSolved);\n    return arr;\n}\n\nvar workerString = \"!function(){\\\"use strict\\\";const A=\\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\",I=\\\"=\\\".charCodeAt(0),g=new Uint8Array(256);for(let I=0;I<A.length;I++)g[A.charCodeAt(I)]=I;function C(A){const I={},g=A.exports,C=g.memory,Q=g.__alloc,t=g.__retain,B=g.__rtti_base||-1;return I.__allocArray=(A,I)=>{const g=function(A){return new Uint32Array(C.buffer)[(B+4>>>2)+2*A]}(A),e=31-Math.clz32(g>>>6&31),o=I.length,i=Q(o<<e,0),r=Q(12,A),n=new Uint32Array(C.buffer);n[r+0>>>2]=t(i),n[r+4>>>2]=i,n[r+8>>>2]=o<<e;const E=C.buffer,s=new Uint8Array(E);if(16384&g)for(let A=0;A<o;++A)s[(i>>>e)+A]=t(I[A]);else s.set(I,i>>>e);return r},I.__getUint8Array=A=>{const I=new Uint32Array(C.buffer),g=I[A+4>>>2];return new Uint8Array(C.buffer,g,I[g-4>>>2]>>>0)},function(A,I={}){const g=A.__argumentsLength?I=>{A.__argumentsLength.value=I}:A.__setArgumentsLength||A.__setargc||(()=>({}));for(const C in A){if(!Object.prototype.hasOwnProperty.call(A,C))continue;const Q=A[C],t=C.split(\\\".\\\")[0];\\\"function\\\"==typeof Q&&Q!==g?(I[t]=(...A)=>(g(A.length),Q(...A))).original=Q:I[t]=Q}return I}(g,I)}class Q{constructor(A){this.b=new Uint8Array(128),this.h=new Uint32Array(16),this.t=0,this.c=0,this.v=new Uint32Array(32),this.m=new Uint32Array(32),this.outlen=A}}function t(A,I){return A[I]^A[I+1]<<8^A[I+2]<<16^A[I+3]<<24}function B(A,I,g,C,Q,t,B,e){const o=I[B],i=I[B+1],r=I[e],n=I[e+1];let E,s,w,c,a=A[g],D=A[g+1],h=A[C],f=A[C+1],y=A[Q],l=A[Q+1],u=A[t],N=A[t+1];E=a+h,s=(a&h|(a|h)&~E)>>>31,a=E,D=D+f+s,E=a+o,s=(a&o|(a|o)&~E)>>>31,a=E,D=D+i+s,w=u^a,c=N^D,u=c,N=w,E=y+u,s=(y&u|(y|u)&~E)>>>31,y=E,l=l+N+s,w=h^y,c=f^l,h=w>>>24^c<<8,f=c>>>24^w<<8,E=a+h,s=(a&h|(a|h)&~E)>>>31,a=E,D=D+f+s,E=a+r,s=(a&r|(a|r)&~E)>>>31,a=E,D=D+n+s,w=u^a,c=N^D,u=w>>>16^c<<16,N=c>>>16^w<<16,E=y+u,s=(y&u|(y|u)&~E)>>>31,y=E,l=l+N+s,w=h^y,c=f^l,h=c>>>31^w<<1,f=w>>>31^c<<1,A[g]=a,A[g+1]=D,A[C]=h,A[C+1]=f,A[Q]=y,A[Q+1]=l,A[t]=u,A[t+1]=N}const e=[4089235720,1779033703,2227873595,3144134277,4271175723,1013904242,1595750129,2773480762,2917565137,1359893119,725511199,2600822924,4215389547,528734635,327033209,1541459225],o=[0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,28,20,8,16,18,30,26,12,2,24,0,4,22,14,10,6,22,16,24,0,10,4,30,26,20,28,6,12,14,2,18,8,14,18,6,2,26,24,22,28,4,12,10,20,8,0,30,16,18,0,10,14,4,8,20,30,28,2,22,24,12,16,6,26,4,24,12,20,0,22,16,6,8,26,14,10,30,28,2,18,24,10,2,30,28,26,8,20,0,14,12,6,18,4,16,22,26,22,14,28,24,2,6,18,10,0,30,8,16,12,4,20,12,30,28,18,22,6,0,16,24,4,26,14,2,8,20,10,20,4,16,8,14,12,2,10,30,22,18,28,6,24,26,0,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,28,20,8,16,18,30,26,12,2,24,0,4,22,14,10,6];function i(A,I){const g=A.v,C=A.m;for(let I=0;I<16;I++)g[I]=A.h[I],g[I+16]=e[I];g[24]=g[24]^A.t,g[25]=g[25]^A.t/4294967296,I&&(g[28]=~g[28],g[29]=~g[29]);for(let I=0;I<32;I++)C[I]=t(A.b,4*I);for(let A=0;A<12;A++)B(g,C,0,8,16,24,o[16*A+0],o[16*A+1]),B(g,C,2,10,18,26,o[16*A+2],o[16*A+3]),B(g,C,4,12,20,28,o[16*A+4],o[16*A+5]),B(g,C,6,14,22,30,o[16*A+6],o[16*A+7]),B(g,C,0,10,20,30,o[16*A+8],o[16*A+9]),B(g,C,2,12,22,24,o[16*A+10],o[16*A+11]),B(g,C,4,14,16,26,o[16*A+12],o[16*A+13]),B(g,C,6,8,18,28,o[16*A+14],o[16*A+15]);for(let I=0;I<16;I++)A.h[I]=A.h[I]^g[I]^g[I+16]}function r(A,I){for(let I=0;I<16;I++)A.h[I]=e[I];A.b.set(I),A.h[0]^=16842752^A.outlen}async function n(){return(A,I,g=4294967295)=>{const C=function(A,I,g){if(128!=A.length)throw Error(\\\"Invalid input\\\");const C=A.buffer,t=new DataView(C),B=new Q(32);B.t=128;const e=t.getUint32(124,!0),o=e+g;for(let g=e;g<o;g++)if(t.setUint32(124,g,!0),r(B,A),i(B,!0),B.h[0]<I)return 0==ASC_TARGET?new Uint8Array(B.h.buffer):Uint8Array.wrap(B.h.buffer);return new Uint8Array(0)}(A,I,g);return[A,C]}}let E,s;Uint8Array.prototype.slice||Object.defineProperty(Uint8Array.prototype,\\\"slice\\\",{value:function(A,I){return new Uint8Array(Array.prototype.slice.call(this,A,I))}}),self.ASC_TARGET=0;const w=new Promise((A=>s=A));self.onerror=A=>{self.postMessage({type:\\\"error\\\",message:JSON.stringify(A)})},self.onmessage=async A=>{const Q=A.data;try{if(\\\"solver\\\"===Q.type){if(Q.forceJS){E=1;const A=await n();s(A)}else try{E=2;const A=WebAssembly.compile(function(A){const C=A.length;let Q=3*C>>>2;A.charCodeAt(C-1)===I&&Q--,A.charCodeAt(C-2)===I&&Q--;const t=new Uint8Array(Q);for(let I=0,Q=0;I<C;I+=4){const C=g[A.charCodeAt(I+0)],B=g[A.charCodeAt(I+1)],e=g[A.charCodeAt(I+2)],o=g[A.charCodeAt(I+3)];t[Q++]=C<<2|B>>4,t[Q++]=(15&B)<<4|e>>2,t[Q++]=(3&e)<<6|63&o}return t}(\\\"AGFzbQEAAAABKghgAABgAn9/AGADf39/AX9gAX8AYAR/f39/AGAAAX9gAX8Bf2ACf38BfwINAQNlbnYFYWJvcnQABAMMCwcGAwAAAQIFAQIABQMBAAEGFgR/AUEAC38BQQALfwBBAwt/AEHgDAsHbgkGbWVtb3J5AgAHX19hbGxvYwABCF9fcmV0YWluAAIJX19yZWxlYXNlAAMJX19jb2xsZWN0AAQHX19yZXNldAAFC19fcnR0aV9iYXNlAwMNVWludDhBcnJheV9JRAMCDHNvbHZlQmxha2UyYgAKCAELCvQSC5IBAQV/IABB8P///wNLBEAACyMBQRBqIgQgAEEPakFwcSICQRAgAkEQSxsiBmoiAj8AIgVBEHQiA0sEQCAFIAIgA2tB//8DakGAgHxxQRB2IgMgBSADShtAAEEASARAIANAAEEASARAAAsLCyACJAEgBEEQayICIAY2AgAgAkEBNgIEIAIgATYCCCACIAA2AgwgBAsEACAACwMAAQsDAAELBgAjACQBC7sCAQF/AkAgAUUNACAAQQA6AAAgACABakEEayICQQA6AAMgAUECTQ0AIABBADoAASAAQQA6AAIgAkEAOgACIAJBADoAASABQQZNDQAgAEEAOgADIAJBADoAACABQQhNDQAgAEEAIABrQQNxIgJqIgBBADYCACAAIAEgAmtBfHEiAmpBHGsiAUEANgIYIAJBCE0NACAAQQA2AgQgAEEANgIIIAFBADYCECABQQA2AhQgAkEYTQ0AIABBADYCDCAAQQA2AhAgAEEANgIUIABBADYCGCABQQA2AgAgAUEANgIEIAFBADYCCCABQQA2AgwgACAAQQRxQRhqIgFqIQAgAiABayEBA0AgAUEgTwRAIABCADcDACAAQgA3AwggAEIANwMQIABCADcDGCABQSBrIQEgAEEgaiEADAELCwsLcgACfyAARQRAQQxBAhABIQALIAALQQA2AgAgAEEANgIEIABBADYCCCABQfD///8DIAJ2SwRAQcAKQfAKQRJBORAAAAsgASACdCIBQQAQASICIAEQBiAAKAIAGiAAIAI2AgAgACACNgIEIAAgATYCCCAAC88BAQJ/QaABQQAQASIAQQxBAxABQYABQQAQBzYCACAAQQxBBBABQQhBAxAHNgIEIABCADcDCCAAQQA2AhAgAEIANwMYIABC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\\\")),Q=await async function(A){const I=await async function(A){const I={env:{abort(){throw Error(\\\"Wasm aborted\\\")}}};return{exports:C(await WebAssembly.instantiate(A,I))}}(A),g=I.exports.__retain(I.exports.__allocArray(I.exports.Uint8Array_ID,new Uint8Array(128)));let Q=I.exports.__getUint8Array(g);return(A,C,t=4294967295)=>{Q.set(A);const B=I.exports.solveBlake2b(g,C,t);Q=I.exports.__getUint8Array(g);const e=I.exports.__getUint8Array(B);return I.exports.__release(B),[Q,e]}}(await A);s(Q)}catch(A){console.log(\\\"FriendlyCaptcha failed to initialize WebAssembly, falling back to Javascript solver: \\\"+A.toString()),E=1;const I=await n();s(I)}self.postMessage({type:\\\"ready\\\",solver:E})}else if(\\\"start\\\"===Q.type){const A=await w;self.postMessage({type:\\\"started\\\"});let I,g=0;for(let C=0;C<256;C++){Q.puzzleSolverInput[123]=C;const[t,B]=A(Q.puzzleSolverInput,Q.threshold);if(0!==B.length){I=t;break}console.warn(\\\"FC: Internal error or no solution found\\\"),g+=Math.pow(2,32)-1}g+=new DataView(I.slice(-4).buffer).getUint32(0,!0),self.postMessage({type:\\\"done\\\",solution:I.slice(-8),h:g,puzzleIndex:Q.puzzleIndex,puzzleNumber:Q.puzzleNumber})}}catch(A){setTimeout((()=>{throw A}))}}}();\";\n\n// Defensive init to make it easier to integrate with Gatsby and friends.\r\nlet URL;\r\nif (typeof window !== \"undefined\") {\r\n    URL = window.URL || window.webkitURL;\r\n}\r\nclass WorkerGroup {\r\n    constructor() {\r\n        this.workers = [];\r\n        this.puzzleNumber = 0;\r\n        this.numPuzzles = 0;\r\n        this.threshold = 0;\r\n        this.startTime = 0;\r\n        this.progress = 0;\r\n        this.totalHashes = 0;\r\n        this.puzzleSolverInputs = [];\r\n        // The index of the next puzzle\r\n        this.puzzleIndex = 0;\r\n        this.solutionBuffer = new Uint8Array(0);\r\n        // initialize some value, so ts is happy\r\n        this.solverType = 1;\r\n        this.readyCount = 0;\r\n        this.startCount = 0;\r\n        this.progressCallback = () => 0;\r\n        this.readyCallback = () => 0;\r\n        this.startedCallback = () => 0;\r\n        this.doneCallback = () => 0;\r\n        this.errorCallback = () => 0;\r\n    }\r\n    init() {\r\n        this.terminateWorkers();\r\n        this.progress = 0;\r\n        this.totalHashes = 0;\r\n        this.readyCount = 0;\r\n        this.startCount = 0;\r\n        // Setup four workers for now - later we could calculate this depending on the device\r\n        this.workers = new Array(4);\r\n        const workerBlob = new Blob([workerString], { type: \"text/javascript\" });\r\n        for (let i = 0; i < this.workers.length; i++) {\r\n            this.workers[i] = new Worker(URL.createObjectURL(workerBlob));\r\n            this.workers[i].onerror = (e) => this.errorCallback(e);\r\n            this.workers[i].onmessage = (e) => {\r\n                const data = e.data;\r\n                if (!data)\r\n                    return;\r\n                if (data.type === \"ready\") {\r\n                    this.readyCount++;\r\n                    this.solverType = data.solver;\r\n                    // We are ready, when all workers are ready\r\n                    if (this.readyCount == this.workers.length) {\r\n                        this.readyCallback();\r\n                    }\r\n                }\r\n                else if (data.type === \"started\") {\r\n                    this.startCount++;\r\n                    // We started, when the first worker starts working\r\n                    if (this.startCount == 1) {\r\n                        this.startTime = Date.now();\r\n                        this.startedCallback();\r\n                    }\r\n                }\r\n                else if (data.type === \"done\") {\r\n                    if (data.puzzleNumber !== this.puzzleNumber)\r\n                        return; // solution belongs to a previous puzzle\r\n                    if (this.puzzleIndex < this.puzzleSolverInputs.length) {\r\n                        this.workers[i].postMessage({\r\n                            type: \"start\",\r\n                            puzzleSolverInput: this.puzzleSolverInputs[this.puzzleIndex],\r\n                            threshold: this.threshold,\r\n                            puzzleIndex: this.puzzleIndex,\r\n                            puzzleNumber: this.puzzleNumber,\r\n                        });\r\n                        this.puzzleIndex++;\r\n                    }\r\n                    this.progress++;\r\n                    this.totalHashes += data.h;\r\n                    this.progressCallback({\r\n                        n: this.numPuzzles,\r\n                        h: this.totalHashes,\r\n                        t: (Date.now() - this.startTime) / 1000,\r\n                        i: this.progress,\r\n                    });\r\n                    this.solutionBuffer.set(data.solution, data.puzzleIndex * 8);\r\n                    // We are done, when all puzzles have been solved\r\n                    if (this.progress == this.numPuzzles) {\r\n                        const totalTime = (Date.now() - this.startTime) / 1000;\r\n                        this.doneCallback({\r\n                            solution: this.solutionBuffer,\r\n                            h: this.totalHashes,\r\n                            t: totalTime,\r\n                            diagnostics: createDiagnosticsBuffer(this.solverType, totalTime),\r\n                            solver: this.solverType,\r\n                        });\r\n                    }\r\n                }\r\n                else if (data.type === \"error\") {\r\n                    this.errorCallback(data);\r\n                }\r\n            };\r\n        }\r\n    }\r\n    setupSolver(forceJS = false) {\r\n        const msg = { type: \"solver\", forceJS: forceJS };\r\n        for (let i = 0; i < this.workers.length; i++) {\r\n            this.workers[i].postMessage(msg);\r\n        }\r\n    }\r\n    start(puzzle) {\r\n        this.puzzleSolverInputs = getPuzzleSolverInputs(puzzle.buffer, puzzle.n);\r\n        this.solutionBuffer = new Uint8Array(8 * puzzle.n);\r\n        this.numPuzzles = puzzle.n;\r\n        this.threshold = puzzle.threshold;\r\n        this.puzzleIndex = 0;\r\n        this.puzzleNumber++;\r\n        for (let i = 0; i < this.workers.length; i++) {\r\n            if (this.puzzleIndex === this.puzzleSolverInputs.length)\r\n                break;\r\n            this.workers[i].postMessage({\r\n                type: \"start\",\r\n                puzzleSolverInput: this.puzzleSolverInputs[i],\r\n                threshold: this.threshold,\r\n                puzzleIndex: this.puzzleIndex,\r\n                puzzleNumber: this.puzzleNumber,\r\n            });\r\n            this.puzzleIndex++;\r\n        }\r\n    }\r\n    terminateWorkers() {\r\n        if (this.workers.length == 0)\r\n            return;\r\n        for (let i = 0; i < this.workers.length; i++) {\r\n            this.workers[i].terminate();\r\n        }\r\n        this.workers = [];\r\n    }\r\n}\n\nconst PUZZLE_ENDPOINT_URL = \"https://api.friendlycaptcha.com/api/v1/puzzle\";\r\nclass WidgetInstance {\r\n    constructor(element, options = {}) {\r\n        this.workerGroup = new WorkerGroup();\r\n        /**\r\n         * The captcha has been succesfully solved.\r\n         */\r\n        this.valid = false;\r\n        /**\r\n         * Some errors may cause a need for the (worker) to be reinitialized. If this is\r\n         * true `init` will be called again when start is called.\r\n         */\r\n        this.needsReInit = false;\r\n        /**\r\n         * Start() has been called at least once ever.\r\n         */\r\n        this.hasBeenStarted = false;\r\n        this.hasBeenDestroyed = false;\r\n        this.opts = Object.assign({\r\n            forceJSFallback: false,\r\n            skipStyleInjection: false,\r\n            startMode: \"focus\",\r\n            puzzleEndpoint: element.dataset[\"puzzleEndpoint\"] || PUZZLE_ENDPOINT_URL,\r\n            startedCallback: () => 0,\r\n            readyCallback: () => 0,\r\n            doneCallback: () => 0,\r\n            errorCallback: () => 0,\r\n            sitekey: element.dataset[\"sitekey\"] || \"\",\r\n            language: element.dataset[\"lang\"] || \"en\",\r\n            solutionFieldName: element.dataset[\"solutionFieldName\"] || \"frc-captcha-solution\",\r\n        }, options);\r\n        this.e = element;\r\n        this.e.friendlyChallengeWidget = this;\r\n        // Load language\r\n        if (typeof this.opts.language === \"string\") {\r\n            let l = localizations[this.opts.language.toLowerCase()];\r\n            if (l === undefined) {\r\n                console.error('FriendlyCaptcha: language \"' + this.opts.language + '\" not found.');\r\n                // Fall back to English\r\n                l = localizations.en;\r\n            }\r\n            this.lang = l;\r\n        }\r\n        else {\r\n            // We assign to a copy of the English language localization, so that any missing values will be English\r\n            this.lang = Object.assign(Object.assign({}, localizations.en), this.opts.language);\r\n        }\r\n        element.innerText = this.lang.text_init;\r\n        if (!this.opts.skipStyleInjection) {\r\n            injectStyle();\r\n        }\r\n        this.init(this.opts.startMode === \"auto\" || this.e.dataset[\"start\"] === \"auto\");\r\n    }\r\n    init(forceStart) {\r\n        if (this.hasBeenDestroyed) {\r\n            console.error(\"FriendlyCaptcha widget has been destroyed using destroy(), it can not be used anymore.\");\r\n            return;\r\n        }\r\n        this.initWorkerGroup();\r\n        if (forceStart) {\r\n            this.start();\r\n        }\r\n        else if (this.e.dataset[\"start\"] !== \"none\" &&\r\n            (this.opts.startMode === \"focus\" || this.e.dataset[\"start\"] === \"focus\")) {\r\n            const form = findParentFormElement(this.e);\r\n            if (form) {\r\n                executeOnceOnFocusInEvent(form, () => this.start());\r\n            }\r\n            else {\r\n                console.log(\"FriendlyCaptcha div seems not to be contained in a form, autostart will not work\");\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Add a listener to the button that calls `this.start` on click.\r\n     */\r\n    makeButtonStart() {\r\n        const b = this.e.querySelector(\"button\");\r\n        if (b) {\r\n            b.addEventListener(\"click\", (e) => this.start(), { once: true, passive: true });\r\n            b.addEventListener(\"touchstart\", (e) => this.start(), { once: true, passive: true });\r\n        }\r\n    }\r\n    onWorkerError(e) {\r\n        this.hasBeenStarted = false;\r\n        this.needsReInit = true;\r\n        if (this.expiryTimeout)\r\n            clearTimeout(this.expiryTimeout);\r\n        console.error(\"[FRC]\", e);\r\n        this.e.innerHTML = getErrorHTML(this.opts.solutionFieldName, this.lang, \"Background worker error \" + e.message);\r\n        this.makeButtonStart();\r\n        // Just out of precaution\r\n        this.opts.forceJSFallback = true;\r\n    }\r\n    initWorkerGroup() {\r\n        this.workerGroup.progressCallback = (progress) => {\r\n            updateProgressBar(this.e, progress);\r\n        };\r\n        this.workerGroup.readyCallback = () => {\r\n            this.e.innerHTML = getReadyHTML(this.opts.solutionFieldName, this.lang);\r\n            this.makeButtonStart();\r\n            this.opts.readyCallback();\r\n        };\r\n        this.workerGroup.startedCallback = () => {\r\n            this.e.innerHTML = getRunningHTML(this.opts.solutionFieldName, this.lang);\r\n            this.opts.startedCallback();\r\n        };\r\n        this.workerGroup.doneCallback = (data) => {\r\n            const solutionPayload = this.handleDone(data);\r\n            this.opts.doneCallback(solutionPayload);\r\n            const callback = this.e.dataset[\"callback\"];\r\n            if (callback) {\r\n                window[callback](solutionPayload);\r\n            }\r\n        };\r\n        this.workerGroup.errorCallback = (e) => {\r\n            this.onWorkerError(e);\r\n        };\r\n        this.workerGroup.init();\r\n        this.workerGroup.setupSolver(this.opts.forceJSFallback);\r\n    }\r\n    expire() {\r\n        this.hasBeenStarted = false;\r\n        // Node.isConnected will be undefined in older browsers\r\n        if (this.e.isConnected !== false) {\r\n            this.e.innerHTML = getExpiredHTML(this.opts.solutionFieldName, this.lang);\r\n            this.makeButtonStart();\r\n        }\r\n    }\r\n    async start() {\r\n        if (this.hasBeenDestroyed) {\r\n            console.error(\"Can not start FriendlyCaptcha widget which has been destroyed\");\r\n            return;\r\n        }\r\n        if (this.hasBeenStarted) {\r\n            console.warn(\"Can not start FriendlyCaptcha widget which has already been started\");\r\n            return;\r\n        }\r\n        const sitekey = this.opts.sitekey || this.e.dataset[\"sitekey\"];\r\n        if (!sitekey) {\r\n            console.error(\"FriendlyCaptcha: sitekey not set on frc-captcha element\");\r\n            this.e.innerHTML = getErrorHTML(this.opts.solutionFieldName, this.lang, \"Website problem: sitekey not set\", false);\r\n            return;\r\n        }\r\n        if (isHeadless()) {\r\n            this.e.innerHTML = getErrorHTML(this.opts.solutionFieldName, this.lang, \"Browser check failed, try a different browser\", false, true);\r\n            return;\r\n        }\r\n        if (this.needsReInit) {\r\n            this.needsReInit = false;\r\n            this.init(true);\r\n            return;\r\n        }\r\n        this.hasBeenStarted = true;\r\n        try {\r\n            this.e.innerHTML = getFetchingHTML(this.opts.solutionFieldName, this.lang);\r\n            this.puzzle = decodeBase64Puzzle(await getPuzzle(this.opts.puzzleEndpoint, sitekey, this.lang));\r\n            if (this.expiryTimeout)\r\n                clearTimeout(this.expiryTimeout);\r\n            this.expiryTimeout = setTimeout(() => this.expire(), this.puzzle.expiry - 30000); // 30s grace\r\n        }\r\n        catch (e) {\r\n            console.error(\"[FRC]\", e);\r\n            this.hasBeenStarted = false;\r\n            if (this.expiryTimeout)\r\n                clearTimeout(this.expiryTimeout);\r\n            this.e.innerHTML = getErrorHTML(this.opts.solutionFieldName, this.lang, e.message);\r\n            this.makeButtonStart();\r\n            const code = \"error_getting_puzzle\";\r\n            this.opts.errorCallback({ code, description: e.toString(), error: e });\r\n            const callback = this.e.dataset[\"callback-error\"];\r\n            if (callback) {\r\n                window[callback](this);\r\n            }\r\n            return;\r\n        }\r\n        this.workerGroup.start(this.puzzle);\r\n    }\r\n    /**\r\n     * This is to be called when the puzzle has been succesfully completed.\r\n     * Here the hidden field gets updated with the solution.\r\n     * @param data message from the webworker\r\n     */\r\n    handleDone(data) {\r\n        this.valid = true;\r\n        const puzzleSolutionMessage = `${this.puzzle.signature}.${this.puzzle.base64}.${encode(data.solution)}.${encode(data.diagnostics)}`;\r\n        this.e.innerHTML = getDoneHTML(this.opts.solutionFieldName, this.lang, puzzleSolutionMessage, data);\r\n        // this.worker = null; // This literally crashes very old browsers..\r\n        this.needsReInit = true;\r\n        return puzzleSolutionMessage;\r\n    }\r\n    /**\r\n     * Cleans up the widget entirely, removing any DOM elements and terminating any background workers.\r\n     * After it is destroyed it can no longer be used for any purpose.\r\n     */\r\n    destroy() {\r\n        this.workerGroup.terminateWorkers();\r\n        this.needsReInit = false;\r\n        this.hasBeenStarted = false;\r\n        if (this.expiryTimeout)\r\n            clearTimeout(this.expiryTimeout);\r\n        if (this.e) {\r\n            this.e.remove();\r\n            // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\r\n            // @ts-ignore\r\n            delete this.e;\r\n        }\r\n        this.hasBeenDestroyed = true;\r\n    }\r\n    /**\r\n     * Resets the widget to the initial state.\r\n     * This is useful in situations where the page does not refresh when you submit and the form may be re-submitted again\r\n     */\r\n    reset() {\r\n        if (this.hasBeenDestroyed) {\r\n            console.error(\"FriendlyCaptcha widget has been destroyed, it can not be used anymore\");\r\n            return;\r\n        }\r\n        this.workerGroup.terminateWorkers();\r\n        this.needsReInit = false;\r\n        this.hasBeenStarted = false;\r\n        if (this.expiryTimeout)\r\n            clearTimeout(this.expiryTimeout);\r\n        this.init(this.opts.startMode === \"auto\" || this.e.dataset[\"start\"] === \"auto\");\r\n    }\r\n}\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/friendly-challenge/index.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./friendly.captcha/frontend/main.js");
/******/ 	
/******/ })()
;