/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./frontend/jet-appointment.js":
/*!*************************************!*\
  !*** ./frontend/jet-appointment.js ***!
  \*************************************/
/***/ (() => {

eval("const {\n  InputData\n} = JetFormBuilderAbstract;\nconst {\n  ListingAddTemplateWatcher,\n  ListingTemplateClick\n} = JetFormBuilderFunctions;\nconst {\n  addAction,\n  addFilter\n} = JetPlugins.hooks;\nfunction AppointmentInput() {\n  InputData.call(this);\n  this.isSupported = function (node) {\n    return 'appointment' === node.dataset.field;\n  };\n  this.addListeners = function () {\n    const [node] = this.nodes;\n    jQuery(node).on('change', () => {\n      this.value.current = node.value;\n    });\n  };\n  this.onObserve = function () {\n    InputData.prototype.onObserve.call(this);\n    this.callable = null;\n    this.value.sanitize(value => {\n      return ['{}', '[]'].includes(value) ? '' : value;\n    });\n  };\n}\nfunction AppointmentProvider() {\n  InputData.call(this);\n  this.providerArgs = {};\n\n  /**\r\n   * Node can be <div> or <select>\r\n   *\r\n   * @param node {Element}\r\n   * @returns {boolean}\r\n   */\n  this.isSupported = function (node) {\n    return node.classList.contains('appointment-provider');\n  };\n  this.setNode = function (node) {\n    InputData.prototype.setNode.call(this, node);\n    this.name = node.dataset?.field || node.name;\n    this.providerArgs = JSON.parse(node.dataset.args);\n  };\n  this.checkIsRequired = function () {\n    return this.providerArgs?.args_str?.includes('required');\n  };\n  this.addListeners = function () {\n    const [node] = this.nodes;\n    node.addEventListener('change', ({\n      target\n    }) => {\n      this.value.current = target.value;\n    });\n    if ('SELECT' === node.nodeName) {\n      node.addEventListener('blur', () => this.reportOnBlur());\n    }\n    this.addListingTemplateListener();\n    this.addServiceListener();\n  };\n  this.addServiceListener = function () {\n    if (!this.providerArgs?.service?.field) {\n      return;\n    }\n    const service = this.root.getInput(this.providerArgs.service.field);\n    if (!service) {\n      return;\n    }\n    service.watch(() => {\n      this.silenceSet(null);\n    });\n  };\n  this.addListingTemplateListener = function () {\n    const [node] = this.nodes;\n\n    // has template?\n    if ('DIV' !== node.nodeName) {\n      return;\n    }\n    node.addEventListener('click', ListingTemplateClick);\n    ListingAddTemplateWatcher(this);\n  };\n  this.onObserve = function () {\n    InputData.prototype.onObserve.call(this);\n    this.callable = null;\n  };\n}\nAppointmentInput.prototype = Object.create(InputData.prototype);\nAppointmentProvider.prototype = Object.create(InputData.prototype);\naddAction('jet.fb.observe.before', 'jet-form-builder/appointment-compatibility',\n/**\r\n * @param observable {Observable}\r\n */\nfunction (observable) {\n  const {\n    rootNode\n  } = observable;\n  for (const calendarWrapper of rootNode.querySelectorAll('.jet-apb-calendar-wrapper')) {\n    const input = calendarWrapper.querySelector('input[data-field]');\n    if ('appointment' !== input.dataset.field) {\n      continue;\n    }\n    input.dataset.jfbSync = 1;\n  }\n  for (const provider of rootNode.querySelectorAll('.field-type-appointment-provider .appointment-provider')) {\n    provider.dataset.jfbSync = 1;\n  }\n});\naddFilter('jet.fb.inputs', 'jet-form-builder/appointment-field', function (inputs) {\n  inputs = [AppointmentInput, AppointmentProvider, ...inputs];\n  return inputs;\n});\naddAction('jet.fb.input.makeReactive', 'jet-form-builder/appointment-compatibility',\n/**\r\n * @param input {InputData}\r\n */\nfunction (input) {\n  for (const currentInput of input.root.getInputs()) {\n    // is calendar\n    if (currentInput instanceof AppointmentInput) {\n      const [node] = currentInput.nodes;\n      const wrapper = node.closest('.appointment-calendar');\n      const args = JSON.parse(wrapper.dataset.args);\n      if (args?.service?.field === input.name) {\n        input.callable.triggerJQuery = () => {};\n      }\n    }\n    if (currentInput instanceof AppointmentProvider) {\n      const [node] = currentInput.nodes;\n      const args = JSON.parse(node.dataset.args);\n      if (args?.service?.field === input.name) {\n        input.callable.triggerJQuery = () => {};\n      }\n    }\n  }\n});\naddAction('jet.fb.multistep.page.init', 'jet-form-builder/appointment-compatibility/switch-page-on-change',\n/**\r\n * @param page {PageState}\r\n */\nfunction (page) {\n  const wrappers = page.node.querySelectorAll('.appointment-provider[data-args*=\"data-switch\"]');\n  if (!wrappers?.length) {\n    return;\n  }\n  for (const wrapper of wrappers) {\n    wrapper.jfbSync.watch(() => {\n      if (!wrapper.jfbSync.value.current) {\n        return;\n      }\n      page.changePage(false).then(() => {}).catch(() => {});\n    });\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./frontend/jet-appointment.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./frontend/jet-appointment.js"]();
/******/ 	
/******/ })()
;