<?php

namespace Jet_Form_Builder\Blocks\Types;

use Jet_Form_Builder\Blocks\Render\Conditional_Block_Render;
use Jet_Form_Builder\Live_Form;
use Jet_Form_Builder\Presets\Types\Dynamic_Preset;

// If this file is called directly, abort.
if ( ! defined( 'WPINC' ) ) {
	die;
}

/**
 * Define Text field block class
 */
class Conditional_Block extends Base {

	/**
	 * Returns block name
	 *
	 * @return [type] [description]
	 */
	public function get_name() {
		return 'conditional-block';
	}

	public function get_label_selector() {
		return '__label';
	}

	public function get_required_selector() {
		return '__label-text .%1$s__required';
	}

	public function get_description_selector() {
		return '__desc';
	}

	public function unregister_attributes( $keys = array() ) {
		parent::unregister_attributes( $keys ); // TODO: Change the autogenerated stub
	}

	protected function _jsm_register_controls() {
		$this->controls_manager->start_section(
			'style_controls',
			[
				'id'    => 'conditional_wrapper_section',
				'title' => __( 'Wrapper', 'jet-form-builder' )
			]
		);
		$this->add_margin_padding( $this->selector( '__conditional' ), array(
			'padding' => array(
				'id'        => 'style_padding',
				'separator' => 'after',
			),
			'margin'  => array(
				'id'        => 'style_margin',
				'separator' => 'after',
			)
		) );

		$this->controls_manager->add_control( [
			'id'           => 'style_border',
			'type'         => 'border',
			'separator'    => 'after',
			'label'        => __( 'Border', 'jet-form-builder' ),
			'css_selector' => array(
				$this->selector( '__conditional' ) => 'border-style:{{STYLE}};border-width:{{WIDTH}};border-radius:{{RADIUS}};border-color:{{COLOR}};',
			),
		] );

		$this->controls_manager->add_control( [
			'id'           => 'style_bg_color',
			'type'         => 'color-picker',
			'label'        => __( 'Background Color', 'jet-form-builder' ),
			'css_selector' => array(
				$this->selector( '__conditional' ) => 'background-color: {{VALUE}}',
			),
		] );

		$this->controls_manager->end_section();
	}

	public function render_callback_field( array $attrs, $content = null, $wp_block = null ) {
		if ( ! Live_Form::instance()->form_id ) {
			return '';
		}
		$this->set_block_data( $attrs, $content );

		return sprintf( '<div class="jet-form-builder__conditional" data-conditional="%2$s">%1$s</div>',
			$this->block_content,
			$this->get_conditions()
		);
	}

	public function get_conditions() {
		foreach ( $this->block_attrs['conditions'] as $index => $condition ) {
			$this->parse_condition( $condition, $index );
		}

		return htmlspecialchars( wp_json_encode( $this->block_attrs['conditions'] ) );
	}

	private function parse_condition( $condition, $index ) {
		$dynamic_value = ( new Dynamic_Preset( 'value' ) )->parse_value( $condition );

		$this->block_attrs['conditions'][ $index ]['value']     = $this->parse_string_with_commas( $dynamic_value );
		$this->block_attrs['conditions'][ $index ]['set_value'] = ( new Dynamic_Preset( 'set_value' ) )->parse_value( $condition );
	}

	private function parse_string_with_commas( $value ) {
		$value_in_array = explode( ',', $value );

		if ( 1 === count( $value_in_array ) ) {
			return $value;
		}

		return array_map( 'trim', $value_in_array );
	}


	/**
	 * Returns current block render instance
	 *
	 * @param null $wp_block
	 *
	 * @return string
	 */
	public function get_block_renderer( $wp_block = null ) {
		return '';
	}
}
